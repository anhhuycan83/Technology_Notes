================>
Unique Index 
1. Create Unique Index 
   db.persons.createIndex({"dob.age" : 1} , {unique : true});

================> 
Single Feild Index : db.persons.createIndex({"dob.age" : 1}) ;  db.persons.createIndex({"dob.age" : -1})   
  1.1.   Single Feild Index create in Age feild will benefit much for fetching persons having age 65 as only persons with age 65 will be searched in index first 
         and then in collection . If not indexed all docs haev to be examined . 
  1.2.   Single feild index will perform much better if a range qury searched partial data like 30-40% . I.e {age : {$gt : 65 } 
  1.3.   Single feild index will perform much worse than no index if a range query searched full data like 30-40% . i.e {age : {$gt : 1}} 
  1.4.   Single feild index will work much better if 1.3. also fetches data in sorted order as in memory sorting data directly fetched from disk will take much time .
  1.5.   In single feild indexex sort order does not matter with indexing order . Performace will be same for any sort order with any index order .  

================>
Compound Indexes : db.persons.createIndex({"dob.age" : 1 , gender : 1 , email : 1} )
  1. Comound indexes are created like shown above and take it as age Index is sorted then in each age feild there is a sorted index of gender feild and 
     in each gender feild there is a sorted index of email feild .  
  2. Compound index created as {"dob.age" : 1 , gender : 1 , email : 1} will automatically be an index for {"dob.age" : 1} and  {"dob.age" : 1 , gender : 1 } and so on                      

  ------>
  3.   db.persons.explain("executionStats").find({"dob.age" : {$eq : 65 } } ) will perform much better than same on persons1 without having this index .
  4.   db.persons.explain("executionStats").find({"dob.age" : {$gt : 65 } } ) will perform much better than same on persons1 without having this index .
  5.   db.persons.explain("executionStats").find({"dob.age" : {$gt : 1 } } )  will perform much worse than same on persons1 without having this 
       index because of unnessary index scanning for all documents being ocvered in this query   .
  6.   db.persons.explain("executionStats").find({"dob.age" : {$gt : 1 } } ).sort({"dob.age" : 1}) will perform much better than same on 
       persons1 not having this index as sorting will have extra cost . 
  ------>
  7.   db.persons.explain("executionStats").find({"dob.age" : {$eq : 65 } , gender : "male" } ) will perform much better than 
       same on persons1 without having this index .'
  8.   db.persons.explain("executionStats").find({"dob.age" : {$gt : 60 } , gender : "male" } ) will perform much better than 
       same on persons1 without having this index .
  9.   db.persons.explain("executionStats").find({"dob.age" : {$gt : 1 } , gender : "male" } ) will be almost equivalent to 
       same on persons1 without having this index as the former query will examine almost half keys in index and then that number of docs which will not be 
       much performant as having full collection scan . But for very large data set can give benefit . Also in this scenario dependeing upon the query 
       if less number of keys are examined it will become performant .  
  10.  db.persons.explain("executionStats").find({"dob.age" : {$gt : 1 } , gender : "male" } ).sort({"dob.age" : 1 , gender : 1 }) will be much performant than 
       same query on persons1 not having index as for this query it will be collection scan which is equivalent to fiding docs in former case but sorting 
       will degrade the performance . 
  ------> 
  11.  db.persons.explain("executionStats").find({"dob.age" : {$eq : 65 } , gender : "male" , email : "vaneet.kataria@rategain.com" } ) will perform much better than 
       same on persons1 without having this index .
  12.  db.persons.explain("executionStats").find({"dob.age" : {$gt : 65 } , gender : "male" , email : "vaneet.kataria@rategain.com" } ) will perform much better than 
       same on persons1 without having this index .
  13 . db.persons.explain("executionStats").find({"dob.age" : {$gt : 1 } , gender : "male" , email : "vaneet.kataria@rategain.com" } ) will perform much better than 
       same on persons1 not having index . It is inverse behaviour of the case in case of single feild index as now number of keys examined from index 
       are much less which will make it performant . But if as per query no of index keys scans are equivalent to full collections scan performance will 
       start degrading . Hence Index weather it is single feild or compound if number of keys examined in index are much less than full collection scan this will
       make query performanrt .   
  14.  db.persons.explain("executionStats").find({"dob.age" : {$gt : 1 } , gender : "male" , email : "vaneet.kataria@rategain.com" } )
       .sort({"dob.age" : 1 , gender : 1 , email : 1  } ) as obvious will perfomr much better than same on persons1 not having index 
       as former query is better in scanning docs as well as data is already sorted too .
  ------>
  15 . db.persons.explain("executionStats").find({gender : "male"} ) and db.persons1.explain("executionStats").find({gender : "male"} )
       will perform same as both will be collection scans . 
  ------>
  16.  db.persons.explain("executionStats").find({gender : "male" , email : "vaneet.kataria@rategain.com"} ) and same on persons1 
       will perform same as both will be a collection scan .
  ------>
  17.  db.persons.explain("executionStats").find({email : "vaneet.kataria@rategain.com"} )  ans same on persons1 will perform same as 
       both are collection scan . 
  ------>
  18.  db.persons.explain("executionStats").find({email : "vaneet.kataria@rategain.com" , gender : "male"} ) and same on persons1 will 
       perform same as both will be collection scan . 
  ------>
  19.  db.persons.explain("executionStats").find({email : "vaneet.kataria@rategain.com" , gender : "male" , "dob.age":{$gt : 1 }} )
       will exibit same behaviour as "case 13" . Hence proved find query params order does not matter for mongo db to use indexes if applicable . 
  ------>
  20.  db.persons.explain("executionStats").find({gender : "male" , "dob.age":{$gt : 1 }} ) will exibit same behaviour as " case 9 "
        Hence proved find query params order does not matter for mongo db to use indexes if applicable . 

  ------>
  Partial Filter Expressions ------> 
  ------>
  21.  Create a compound index having "dob.age" feild indexes in asc order 
       for those docs only for which gender is "male" .  
       db.persons.createIndex({"dob.age" : 1} , {partialFilterExpression : {gender : "male"   }  } )  
     
  22.   Now db.persons.explain("executionStats").find({"dob.age" : 65 , gender : "male"}) will be an index scan and perform much better than 
        db.persons.explain("executionStats").find({"dob.age" : 65 , gender : "female"}) as it will be a collections scan . 
  
  23.   db.persons.explain("executionStats").find({"dob.age" : 65}) will also be a collection scan as for all docs this index has not been created .
        Hence this is query specific index if all params mathcing for which index was created are given then it becomes an index scan . 
 
  ------>
  Sorting Order 
  ------>  
  24 .  db.persons.explain("executionStats").
        find({"dob.age" : {$gt : 1 } , gender : "male" , email : "vaneet.kataria@rategain.com"}).sort({"dob.age" : 1}) will be directly 
        fetched as index scan and no additional sorting will be required hence performant . 
  
  25 .  db.persons.explain("executionStats").
        find({"dob.age" : {$gt : 1 } , gender : "male" , email : "vaneet.kataria@rategain.com"}).sort({"dob.age" : 1 , gender : 1 })
        will be directly fetched as index scan and no additional sorting will be required hence performant . 

  26.   db.persons.explain("executionStats").
        find({"dob.age" : {$gt : 1 } , gender : "male" , email : "vaneet.kataria@rategain.com"}).sort({"dob.age" : 1 , gender : 1 , email: 1 })
        will be directly fetched as index scan and no additional sorting will be required hence performant .

  28.    db.persons.explain("executionStats").
        find({"dob.age" : {$gt : 1 } , gender : "male" , email : "vaneet.kataria@rategain.com"}).sort({"gender" : 1}) will be directly 
        fetched as index scan and an additional sorting will be required hence non performant as data is not directly indexed on gender . 

  29.    db.persons.explain("executionStats").
        find({"dob.age" : {$gt : 1 } , gender : "male" , email : "vaneet.kataria@rategain.com"}).sort({"gender" : 1 , email : 1 }) will be directly 
        fetched as index scan and an additional sorting will be required hence non performant as data is not directly indexed on gender and then email  .
  
  30.    db.persons.explain("executionStats").
        find({"dob.age" : {$gt : 1 } , gender : "male" , email : "vaneet.kataria@rategain.com"}).sort({email : 1 }) will be directly 
        fetched as index scan and an additional sorting will be required hence non performant as data is not directly indexed on email  .

  31 .  db.persons.explain("executionStats").
        find({"dob.age" : {$gt : 1 } , gender : "male" , email : "vaneet.kataria@rategain.com"}).sort({email : 1})  will be directly 
        fetched as index scan and an additional sorting will be required hence non performant as data is not directly indexed on email  .
 
  32 .  db.persons.explain("executionStats").
        find({"dob.age" : {$gt : 1 } , gender : "male" , email : "vaneet.kataria@rategain.com"}).sort({email : 1 , gender : 1 })
        will be directly fetched as index scan and an additional sorting will be required hence non performant as data is not directly indexed 
        on email and then gender .  .

  33.   db.persons.explain("executionStats").
        find({"dob.age" : {$gt : 1 } , gender : "male" , email : "vaneet.kataria@rategain.com"}).sort({email: 1 , gender : 1 , "dob.age" : 1 })
         will be directly fetched as index scan and an additional sorting will be required hence non performant as data is not directly indexed 
        on email and then gender and then "dob.age"  . Hence sorting order matters . This is reverse case of case 26 .

  34.   db.persons.explain("executionStats").
        find({"dob.age" : {$gt : 1 } , gender : "male" , email : "vaneet.kataria@rategain.com"}).sort({"gender" : 1}) will be directly 
        fetched as index scan and an additional sorting will be required hence non performant as data is not directly indexed on gender . 

  35.    db.persons.explain("executionStats").
        find({"dob.age" : {$gt : 1 } , gender : "male" , email : "vaneet.kataria@rategain.com"}).sort({"gender" : 1 , "dob.age" : 1 }) will be directly 
        fetched as index scan and an additional sorting will be required hence non performant as data is not directly indexed on gender and then "dob.age" .
  
  36.   db.persons.explain("executionStats").
        find({"dob.age" : {$gt : 1 } , gender : "male" , email : "vaneet.kataria@rategain.com"}).sort({"dob.age" : 1}) will be directly 
        fetched as index scan and no additional sorting will be required hence performant .   
 
         


  

     






  
================>
3. Queries 
3.1.   Below query is the first level of checking execuation stats with mongo db .
            db.persons.expalin().find({"dob.age" : { $gt : 10}}).sort({"dob.age" : 1})
3.2.   Below query also shows some more details of query execution .  
            db.persons.expalin("executionStats").find({"dob.age" : { $gt : 10}}).sort({"dob.age" : 1})

================>
4. Some Constants 
4.1. Max doc size :16 MB 
4.2. Max nesting level per doc : 100 
4.3. Max sorting memory by default : 32 MB 

