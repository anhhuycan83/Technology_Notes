Q1: Can we specify an entity witthout defining a feild with @Id annatation ? 
Ans : No , An exception saying No identifier specified for entity: com.katariasoft.technologies.jpaHibernate.college.data.entity.Student
      will be thrown . Hence we have to define an entity with identifier only . 

Q2: What if i didn't annotated with @Entity as start annotating with @Id like below ?

     public class IdProof {

	@Id
	private long id;
	private String proofNo;
	private String address
	private String fatherName;
     }

Ans : No Tables will be generated as jpa-hibernate will create tables for only those classes marked with @Entity annoatation. 

Q3: What if i didn't coded any constructor and any getter setter ? 
Ans : Tables will be generated successfully as soon as pojos marked with @Entity are found . Getter setter and constructor 
      declaration does not affect table generation .  

Q4: How Entity class name and entity feild names are mapped to database if no @Coloumn and @Table are defined? 
Ans :     
    For below class 

    @Entity
    public class IdProof {

	@Id
	private long id;
	private String proofNo;
	private String address
	private String fatherName;
     }   

Table name will be : ID_PROOF and feilds name will be ID , PROOF_NO , ADDRESS , FATHER_NAME . 
However while writing queries we can query them by id , proof_no etc . 

Q5: How friendsofFriendsOfFriendsName will be genrated as a coloumn name in table ? 
Ans : FRIENDSOF_FRIENDS_OF_FRIENDS_NAME . Hibernate makes a snake case from camel case . 
      It converts from camelk case to snake case . Means for every largeCap character it will add a _ before large cap and 
      start writing the complete name again . 

Q5: How doed byte , short , int , long ids map to db ? 
Ans : byte ==> TINTINT(3) , short ==> SMALLINIT(5) , int ==> INTEGER(10) , long ==> BIGINT(19)

Q5: Why 3 , 5 , 10 and 19 are generated for above values ? 
1. byte	8 bits	-128 .. 127   ==> column with tiniint(3) will be able to take values in the range defined -128 +127 . Hence 3 digit .  

2. short	16 bits	-32,768 .. 32,767 ==> column with smallint(5) will be able to take values in the range defined -32,768 .. 32,767 . Hence 5 .

3.  int	32 bits	-2,147,483,648 .. 2,147,483,647 ==> column with Integer(10) will be able to take values in the range defined -2,147,483,648 .. 2,147,483,647 . Hence 10 .

4. long	64 bits	-9,223,372,036,854,775,808 .. 9,223,372,036,854,775,807   ==> column with BigInt(19) will be able to take values in the range defined -9,223,372,036,854,775,808 .. 9,223,372,036,854,775,807 . Hence 19 .



  
     
